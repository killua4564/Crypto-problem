from Crypto.Util.number import *
from secret import FLAG

def get_twin_prime():
    p = 0
    while not (isPrime(p) and isPrime(p+2)):
        p = getPrime(1024)
    return p

def gen_key():
    p, q, r = (get_twin_prime() for _ in range(3))
    return (p * q, (p + 2) * (q + 2), r * r)

if __name__ == '__main__':
    e = 0x10001
    n1, n2, n3 = gen_key()
    flag_enc = bytes_to_long(FLAG.encode())
    flag_enc = pow(flag_enc, e, n1)
    flag_enc = pow(flag_enc, e, n2)
    flag_enc = pow(flag_enc, e, n3)

    print(f'key1 = {(e, n1)}')
    print(f'key2 = {(e, n2)}')
    print(f'key3 = {(e, n3)}')
    print(f'flag = {flag_enc}')

# key1 = (65537, 84820956413429332796690827724915690505696336907740947500605479089059006602742225286073021263122538735888252058094716413832925796246054282356886701473276125599435192627029447237279105761030670146503573205009541449272818254758422245773972586945282046140359778509489080369837895079224805595632840285431989298436798505479755540333322633918963441973928883871217569629326012217635504519192118913107413530550995842640372522989939272528990081076494700184095651888578568992829714665059053366962495310691901024059158818127623223624912424863061315681662540007954424523427446809216550027898058760765852920467277353101162412373181)
# key2 = (65537, 84820956413429332796690827724915690505696336907740947500605479089059006602742225286073021263122538735888252058094716413832925796246054282356886701473276125599435192627029447237279105761030670146503573205009541449272818254758422245773972586945282046140359778509489080369837895079224805595632840285431989298437976271727775966125269181904402315042443320398252698129134310298561874286744117477755625806443771821342506764942212606977434984920923723460619807384019282860390062755123708470898798960620302939466502497430560189797349320538949802303735113484994375164253053271420864712076993436043241657715962277912621718868221)
# key3 = (65537, 58123486362064667555466475717370408070199665904982372576574447725665367829878332550049488007443956007176784890626203118050345394697661910159906020953342951326395598944762253650749965605654286346836912726575938846794876279594545291620111929999192106812420799833444736667626967245610743376221892058031593359106818401233106899043177797507461438034669816921497196196913698270745341814932812756679967928243277323974208456991009919433891731883817255447333662153387931348882966890579301349388305681910774991657750399527965242266987155301185686114487931258672299115173941456935183304255067733897005627588467215911347293556081)
# flag = 23710301049084490529964261384142557632529443459650058203720801353730102442793988207817665752298834419340182661682971909793779857164606511594734717537110977441824442229109328873290078268731103609478387820794734386073125060860926392442113483617109115232730016392596891530147882093928632660511813482072909896422974567333177788636779265725053030732986083382221180276600799656054391696659492828146098411784922840623420415192124804997900294592273109912027202457421881408261252600165301658219382881054836151963307335339928990092626882843859920185653781060212822496817837558743177560661769819209986062122135761851337727598965
